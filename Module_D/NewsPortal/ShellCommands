1.	Создать двух пользователей (с помощью метода User.objects.create_user('username')).
>>> user1 = User.objects.create_user('Mike')
>>> user2 = User.objects.create_user('Tom')

2.	Создать два объекта модели Author, связанные с пользователями.
>>> au1 = Author.objects.create(username = user1)
>>> au2 = Author.objects.create(username = user2)

3.	Добавить 4 категории в модель Category.
>>> cat1 = Category.objects.create(catname='Sport')
>>> cat2 = Category.objects.create(catname='Politics')
>>> cat3 = Category.objects.create(catname='Science')
>>> cat4 = Category.objects.create(catname='World of IT')

4.	Добавить 2 статьи и 1 новость.
>>> post1 = Post.objects.create(title = 'Frontend в условиях полной редактируемости',
							content = 'Нам требовалось разработать сайт на базе CMS «1С-Битрикс: Управление сайтом» и при этом предоставить контент-менеджерам полную власть над страницами и их содержимым. Контент-менеджеры \читай не разработчики\ должны иметь возможность собирать страницы из заранее созданных блоков, определять порядок этих блоков на странице, управлять настройками дополнительного визуального оформления для каждого из блоков и редактировать контент в рамках поддерживаемых типов данных. И всё это управляется через визуальный редактор Битрикса без необходимости вручную создавать новый инфоблок для каждого блока на странице. Такую систему можно назвать “Блочная редактируемость”.',
							type = 'AR',
							author = au1)
>>> post2 = Post.objects.create(title = 'Китай и ОАЭ договорились о сотрудничестве по исследованию Луны',
							content = 'Космический центр Мохаммеда бин Рашида (MBRSC) Объединённых Арабских Эмиратов сообщил о подписании меморандума о взаимопонимании с Национальным китайским космическим управлением для совместной работы над будущими лунными проектами.',
							type = 'AR',
							author = au1)
>>> news1 = Post.objects.create(title = '«Бавария» проваливается в бундеслиге',
							content = 'Кажется, несколько дней назад был напряженная игра в Лиге чемпионов, отнявшая массу эмоций, однако «Манчестер Сити» словно не утолил свой победный голод. Шикарный пас пяткой от Фодена, кросс Де Брейне и Грилиш открыл счет на 1-й минуте!',
							type = 'NW',
							author = au2)
5.	Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> post1.category.add(cat4, cat3)
>>> post2.category.add(cat2, cat3)
>>> news1.category.add(cat1, cat2)

6.	Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> add_comm1 = Comment.objects.create(post=post1, author=user2, content = 'Спасибо за статью. Добавить нечего')
>>> add_comm2 = Comment.objects.create(post=post1, author=user3, content = 'Полезная информация. Занимаюсь Frontend разработкой давно, очень интересно')
>>> add_comm3 = Comment.objects.create(post=post2, author=user2, content = 'Я думаю, что не взлетит')
>>> add_comm4 = Comment.objects.create(post=news1, author=user1, content = 'Спартак - чемпион!')

7.	Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> add_comm1.like();add_comm1.save()
>>> add_comm2.like();add_comm2.save()
>>> add_comm3.dislike();add_comm3.save()
>>> add_comm4.like();add_comm4.save()

>>> post1.like();post1.save()
>>> post2.like();post2.save()
>>> news1.dislike();news1.save()

8.	Обновить рейтинги пользователей.
>>> for author_ in Author.objects.all().values_list('username_id', flat=True):
>>>     newrate = sum(Post.objects.filter(author_id = author_).values_list('rating', flat=True))*3 + \
>>>               sum(Comment.objects.filter(author_id = author_).values_list('rating', flat=True)) + \
>>>               sum(Comment.objects.filter(post_id__author_id = author_).values_list('rating', flat=True))
>>>     au = Author.objects.get(username_id=author_)
>>>     au.update_rating(newrating); au.save()

9.	Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
>>> Author.objects.order_by('-rating').first()

10.	Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> print(Post.objects.order_by('-rating').values('cr_time', 'author_id__username_id__username', 'rating', 'title').first(), Post.objects.order_by('-rating').first().preview())

11.	Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> bestpost = Post.objects.order_by('-rating').first()
>>> Comment.objects.filter(post = bestpost).values_list('content', flat=True)
