"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os.path
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent

# Check enviroment varibles loading
dotenv_path = os.path.join(os.path.dirname(__file__), '../.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
else:
    print("Не найден файл переменных окружения '.env'")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news.apps.NewsConfig',
    'accounts',

    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'allauth.socialaccount.providers.yandex',
    'allauth.socialaccount.providers.vk',

    'django_apscheduler',
    'django_celery_beat',
    #'debug_toolbar',
]

SITE_ID = 1
SITE_URL = 'http://127.0.0.1:8000'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'accounts.middleware.TimeoutLogout',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'debug_toolbar.middleware.DebugToolbarMiddleware',



]

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPortal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Minsk'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR/'static']

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

INTERNAL_IPS = [
    "127.0.0.1",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_REDIRECT_URL = '/news'
LOGOUT_REDIRECT_URL = '/news'

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignUpFromallauth"}  # Переопределение формы по умолчанию

# Common email setting
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_VERIFICATION = True

# SMTP Yandex setting
EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = os.getenv('yandex_EMAIL_HOST_USER')  # имя пользователя
EMAIL_HOST_PASSWORD = os.getenv("yandex_EMAIL_HOST_PASSWORD")  # пароль от почты
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = os.getenv("yandex_EMAIL_HOST_USER")+'@yandex.ru'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Apscheduler settings
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


# Caches setting with Redis
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379',
    }
}

LOGOUT_TIMEOUT = 60 * 60 * 24


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'console_debug': {
#             'format': '{asctime} | {levelname} | {message}',
#             'style': '{'
#         },
#         'console_warning': {
#             'format': '{asctime} | {levelname} | {message} | {pathname}',
#             'style': '{'
#         },
#         'console_error': {
#             'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
#             'style': '{'
#         },
#         'file_general_security': {
#             'format': '{asctime} | {levelname} | {module} | {message}',
#             'style': '{'
#         },
#         'file_errors': {
#             'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
#             'style': '{'
#         },
#         'mail': {
#             'format': '{asctime} | {levelname} | {message} | {pathname}',
#             'style': '{'
#         },
#     },
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#         'filter_debug_info_level': {
#             '()': 'logging_formatter.log_middleware.FilterLevels',
#             'filter_levels': [
#                 "DEBUG",
#                 "INFO",
#             ]
#         },
#         'filter_warning_level': {
#             '()': 'logging_formatter.log_middleware.FilterLevels',
#             'filter_levels': [
#                 "WARNING"
#             ]
#         },
#     },
#     'handlers': {
#         'console_debug': {
#             'class': 'logging.StreamHandler',
#             'filters': ['require_debug_true',
#                         'filter_debug_info_level',
#                         ],
#             'formatter': 'console_debug',
#         },
#         'console_warning': {
#             'level': 'WARNING',
#             'class': 'logging.StreamHandler',
#             'filters': ['require_debug_true',
#                         'filter_warning_level',
#                         ],
#             'formatter': 'console_warning',
#         },
#         'console_error': {
#             'level': 'ERROR',
#             'class': 'logging.StreamHandler',
#             'filters': ['require_debug_true'],
#             'formatter': 'console_error',
#         },
#         'file_general': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filters': ['require_debug_false'],
#             'formatter': 'file_general_security',
#             'filename': 'logs/general.log',
#         },
#         'file_errors': {
#             'class': 'logging.FileHandler',
#             'formatter': 'file_errors',
#             'filename': 'logs/errors.log',
#         },
#         'file_security': {
#             'class': 'logging.FileHandler',
#             'formatter': 'file_general_security',
#             'filename': 'logs/security.log',
#         },
#         'mail_admins': {
#             'class': 'django.utils.log.AdminEmailHandler',
#             'filters': ['require_debug_false'],
#             'formatter': 'mail'
#         }
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console_debug',
#                          'console_warning',
#                          'console_error',
#                          'file_general',
#                          ],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#
#         'django.request': {
#             'handlers': ['file_errors',
#                          'mail_admins',
#                          ],
#             'level': 'ERROR',
#             'propagate': True,
#         },
#         'django.server': {
#             'handlers': ['file_errors',
#                          'mail_admins'
#                          ],
#             'level': 'INFO',
#             'propagate': True,
#         },
#         'django.template': {
#             'handlers': ['file_errors'],
#             'level': 'ERROR',
#             'propagate': True,
#         },
#         'django.db.backends': {
#             'handlers': ['file_errors'],
#             'level': 'ERROR',
#             'propagate': True,
#         },
#         'django.db.security': {
#             'handlers': ['file_security'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console_debug': {
            'format': 'console_debug: {asctime} | {levelname} | {message}',
            'style': '{'
        },
        'console_warning': {
            'format': '{asctime} | {levelname} | {message} | {pathname}',
            'style': '{'
        },
        'console_error': {
            'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{'
        },
        'file_general_security': {
            'format': '{asctime} | {levelname} | {module} | {message}',
            'style': '{'
        },
        'file_errors': {
            'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{'
        },
        'mail': {
            'format': '{asctime} | {levelname} | {message} | {pathname}',
            'style': '{'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'filter_debug_info_level': {
            '()': 'logging_formatter.log_middleware.FilterLevels',
            'filter_levels': [
                "DEBUG",
                "INFO",
            ]
        },
    },
    'handlers': {
        'console_debug': {
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true',
                        'filter_debug_info_level'],
            'formatter': 'console_debug',
        },
        'console_warning': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'console_warning',
        },
        'console_error': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'console_error',
        },
        'file_general': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filters': ['require_debug_false'],
            'formatter': 'file_general_security',
            'filename': 'logs/general.log',
        },
        'file_errors': {
            'class': 'logging.FileHandler',
            'formatter': 'file_errors',
            'filename': 'logs/errors.log',
        },
        'file_security': {
            'class': 'logging.FileHandler',
            'formatter': 'file_general_security',
            'filename': 'logs/security.log',
        },
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
            'formatter': 'mail'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console_debug',
                         'console_warning',
                         'console_error',
                         'file_general',
                         ],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['file_errors',
                         'mail_admins'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.template': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db.security': {
            'handlers': ['file_security'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}